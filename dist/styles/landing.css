.hero-content {
    position: relative; /* Box is in flow of the document, but can be shifted and create coordinates */
    min-height: 600px; /* Specifies minimum height for this block */
    background-image: url(../assets/images/bloc_jams_bg.jpg); /* Specifies background image to use */
    background-repeat: no-repeat; /* Do not create a repeated image */
    background-position: center center; /*center horizontally (first) and vertically (second) */
    background-size: cover; /*scales the image so it always covers the entire background*/
}

.hero-content .hero-title {
/*This will edit the title in the hero content box. Note that .hero-title class is set for an element that is a child of the .hero-content class */
    
    position: absolute; /* This will set the title to an absolute position, but as a child of hero-content (which is relative), it will absolute to the coordinates of the hero-content container*/
    top: 40%; /* This sets up a 40% offset from the top for the .hero-titile */
    
    /* These are vendor prefixes. These are required when CSS code that has not been officially adopted by CSS3 is used. Most often the purpose of these is to ensure compatibility with a certain type of browser (or an earlier version). Here we use transform: translateY with the vendor prefixes for -webkit (safari), -moz (mozilla/firefox) and -ms Mircrosoft. If we look up the transform element in W3 schools, we see that for example using this tag will allow firefox support for version 3.5, but leaving it out means it would only be compatible with 10. 
    
    Here, the Transform is used to shift an element here by =50%.  Note that elements will not reflow off a transformed box, so it can break thigs, That is why it is better used in an abolute element, which is already out of the normal flow of the document. There is a lot more to research on transform functionality */
    -webkit-transform: translateY(-50%);
    -moz-transform: translateY(-50%);
    -ms-transform: translateY(-50%);     
    
    width: 100%; /*This sets the width of the title element to 100% of the parent element .hero-content */
    text-align: center; /* This will center the text for this element, and since it is 100% the width of the parent element, it will center it in hero-content */
    font-size: 4rem; /* This will set the text size of this class. Note it will override the default of HTML <h5> tag */
    font-weight: 300; /* This defines the font weight, which is one of the given font weights from the Open Sans font we downloaded. Note that if we used a value that was not downloaded, it will default to different text */
    text-transform: uppercase; /*Transform our text into uppercase letters */
    letter-spacing: 0.5rem; /* This sets the spacing between letters */
    text-shadow: 1px 1px 0px rgb(58,23,63); /* This sets a text shadow. This uses the following format - text-shadow: h-shadow v-shadow blur-radius color. Color can be set to none,  */
    
}

body.landing {
/* This selector will apply to any <body> tag that has a landing class in the linked HTML document */    
    background-color: rgb(58,23,63);
}



.selling-points {
    position: relative; /* Again, sets the position as relative, so it is in the flow, but can be used to create coordinates */
 }

.point {
    
    position: relative; /* Sets the position of point to relative, which is in the flow of the parent element, in this case, all the div points are in the selling points section */
    padding: 2rem; /* This adds padding around the box to give some space for the text. */
    text-align: center; /* This will text align center */
    
    opacity: 0; /*Opacity zero makes the point element transparent*/
    
    /*These three fuctions do the same thing,but use vendor tags to support more browser versions */
    -webkit-transform: scaleX(0.8) translateY(5rem); /*scaleX - scale 90% along the X (horz) axis */
    -moz-transform: scaleX(0.8) translateY(5rem); /* translateY - move 3rem down  Y (vert) axis */
    transform: scaleX(0.8) translateY(5rem);
    
    /*This function has four unique values, we are using three. all indicates to transition all properties of the element. 0.25s indicates how long we want the transition to take. ease-in-out defines our timing function. It starts slow, accelerates in the middle, and slows at the end. There are many different timing function, or we can write our own. REF: https://developer.mozilla.org/en-US/docs/Web/CSS/timing-function */
    -webkit-transition: all 0.5s cubic-bezier(0.42, 0.0, 0.58, 1.); /* Bezler Curve definition */
    -moz-transition: all 0.5s cubic-bezier(0.42, 0.0, 0.58, 1.0); 
    transition: all 0.5s cubic-bezier ease-in-out;
    
    /* This tells how long the function can wait to delay the transition by 0.2 seconds. Again vendor tags for full support of transitions */
    -webkit-transition-delay: 0.25s;
    -moz-transition-delay: 0.25s;
    transition-delay: 0.25s;
    
}

.point .point-title {
    font-size: 1.25rem;
}

.ion-music-note, .ion-radio-waves, .ion-iphone {
/*commas allow us to give a similar set of styles to multiple classes without needing to retype them all. */    
    color: rgb(233,50,177);
    font-size: 5rem;
}

